***************ENTITY LAYER******************


﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Entities
{
    public class Customer
    {
        public string CustomerId { get; set; }
        public string CustomerName { get; set; }
        public char Gender { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string Address { get; set; }
    }
}


********************EXCEPTION LAYER***********************



﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exceptions
{
    public class CustomerException:ApplicationException
    {
        //default constructor
        public CustomerException():base()
        { }
        //parameter constructor which takes one string parameter
        public CustomerException(string message):base(message)
        { }
        //parameterized constructor which takes two parameters
        public CustomerException(string message, Exception innerException):base(message,innerException)
        { }

    }
}


*******************************DAL***************************


﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Entities;
using Exceptions;

namespace DataAccessLayer
{
    public class CustomerOperations
    {
        //generic list to store all the customers
        static List<Customer> customerList = new List<Customer>();

        //method to add a customer
        public bool AddCustomer(Customer cobj)
        {
            bool result = false;
            try
            {
                customerList.Add(cobj);
                result = true;

            }
            catch (CustomerException)
            {

                throw;
            }

            return result;
        }

        //method to display all customers
        public List<Customer> DisplayCustomers()
        {
            return customerList;
        }

        public Customer Search(string customerId)
        {
            Customer cobj = null;
            foreach (Customer item in customerList)
            {
                if (item.CustomerId == customerId)
                {
                    cobj = item;
                    break;
                }

            }


            return cobj;
        }

        public bool UpdateCustomer(Customer cobj)
        {
            bool result = false;
            Customer c = null;
            foreach (Customer item in customerList)
            {
                if (item.CustomerId == cobj.CustomerId)
                {
                    c = item;
                    break;
                }
            }
                if(c!=null)
                {
                    c.CustomerId = cobj.CustomerId;
                    c.CustomerName = cobj.CustomerName;
                    c.Gender = cobj.Gender;
                    c.DateOfBirth = cobj.DateOfBirth;
                    c.Address = cobj.Address;
                    result = true;
                }
                return result;


            }

        public bool DeleteCustomer(string customerId)
        {
            bool result = false;
            Customer cobj = null;
            foreach (Customer item in customerList)
            {
                cobj = item;
                break;

            }
            if (cobj != null)
            {
                customerList.Remove(cobj);
                result = true;
            }

            return result;
        }
    }
}


***********************************BAL***********************

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Entities;
using Exceptions;

namespace DataAccessLayer
{
    public class CustomerOperations
    {
        //generic list to store all the customers
        static List<Customer> customerList = new List<Customer>();

        //method to add a customer
        public bool AddCustomer(Customer cobj)
        {
            bool result = false;
            try
            {
                customerList.Add(cobj);
                result = true;

            }
            catch (CustomerException)
            {

                throw;
            }

            return result;
        }

        //method to display all customers
        public List<Customer> DisplayCustomers()
        {
            return customerList;
        }

        public Customer Search(string customerId)
        {
            Customer cobj = null;
            foreach (Customer item in customerList)
            {
                if (item.CustomerId == customerId)
                {
                    cobj = item;
                    break;
                }

            }


            return cobj;
        }

        public bool UpdateCustomer(Customer cobj)
        {
            bool result = false;
            Customer c = null;
            foreach (Customer item in customerList)
            {
                if (item.CustomerId == cobj.CustomerId)
                {
                    c = item;
                    break;
                }
            }
                if(c!=null)
                {
                    c.CustomerId = cobj.CustomerId;
                    c.CustomerName = cobj.CustomerName;
                    c.Gender = cobj.Gender;
                    c.DateOfBirth = cobj.DateOfBirth;
                    c.Address = cobj.Address;
                    result = true;
                }
                return result;


            }

        public bool DeleteCustomer(string customerId)
        {
            bool result = false;
            Customer cobj = null;
            foreach (Customer item in customerList)
            {
                cobj = item;
                break;

            }
            if (cobj != null)
            {
                customerList.Remove(cobj);
                result = true;
            }

            return result;
        }

    }
}

*************************PAL*****************************


﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Entities;
using Exceptions;
using BusinessLayer;

namespace PresentationLayer
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                int choice = 0;
                do
                {
                    PrintMenu();
                    Console.WriteLine("enter ur choice");
                    choice = int.Parse(Console.ReadLine());
                    switch (choice)
                    {
                        case 1:
                            AddCustomer();
                            break;
                        case 2:
                            DisplayCustomers();
                            
                            break;
                        case 3:
                            Search();
                            
                            break;
                        case 4:
                            UpdateCustomer();

                            break;
                        case 5:
                            DeleteCustomer();
                            break;
                        case 6:
                            break;
                        default:
                            Console.WriteLine("invalid choice");
                            break;
                    }

                } while (choice != 6);


            }
            catch (CustomerException ex)
            {

                Console.WriteLine(ex.Message);
            }
            catch (SystemException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        static void PrintMenu()
        {
            Console.WriteLine("\nwelcome to customer management system.");
            Console.WriteLine("\n1. Add customer\n");
            Console.WriteLine("2.display all customers");
            Console.WriteLine("\n3.Search customer");
            Console.WriteLine("\n4. update customer");
            Console.WriteLine("\n5. delete customer");
            Console.WriteLine("\n6. exit");

        }

        static void AddCustomer()
        {
            try
            {
                //creating object of entity class
                Customer obj = new Customer();
                //store all the customer attributes
                Console.WriteLine("enter customer id");
                obj.CustomerId =Console.ReadLine();
                Console.WriteLine("enter customer name");
                obj.CustomerName = Console.ReadLine();
                Console.WriteLine("enter gender");
                obj.Gender = Convert.ToChar(Console.ReadLine());
                Console.WriteLine("enter dob");
                obj.DateOfBirth = DateTime.Parse(Console.ReadLine());
                Console.WriteLine("enter address");
                obj.Address = Console.ReadLine();


                //creating obj of business layer class
                CustomerBL cbl = new CustomerBL();
                //invoke its addproduct method
                bool result = cbl.AddCustomer(obj);
                if (result)
                {
                    Console.WriteLine("product added successfully");
                }
            }
            catch (CustomerException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (FormatException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (SystemException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        static void DisplayCustomers()
        {
            try
            {
                CustomerBL cbl = new CustomerBL();
                List<Customer> list = cbl.DisplayCustomers();
                foreach (Customer item in list)
                {
                    Console.WriteLine("customer id:{0} customer name:{1} gender:{2} dob:{3} address:{4}",
                        item.CustomerId, item.CustomerName, item.Gender, item.DateOfBirth, item.Address);
                    Console.WriteLine();
                }

            }
            catch (SystemException ex)
            {

                Console.WriteLine(ex.Message);
            }
        }

        static void Search()
        {
            try
            {
                Console.WriteLine("enter customerid");
                string cid = Console.ReadLine();

                CustomerBL cbl = new CustomerBL();
                Customer c = cbl.Search(cid);
                if (c != null)
                {
                    Console.WriteLine("customer id:{0} customer name:{1} gender:{2} dob:{3} address:{4}",
                        c.CustomerId, c.CustomerName, c.Gender, c.DateOfBirth, c.Address);
                    Console.WriteLine();
                }
                else
                    Console.WriteLine("no customer found");

            }
            catch (FormatException ex)
            {

                Console.WriteLine(ex.Message);
            }
            catch (SystemException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        static void UpdateCustomer()
        {
            try
            {
                Customer obj = new Customer();
                //store all the customer attributes
                Console.WriteLine("enter customer id");
                obj.CustomerId = Console.ReadLine();
                Console.WriteLine("enter customer name");
                obj.CustomerName = Console.ReadLine();
                Console.WriteLine("enter gender");
                obj.Gender = Convert.ToChar(Console.ReadLine());
                Console.WriteLine("enter dob");
                obj.DateOfBirth = DateTime.Parse(Console.ReadLine());
                Console.WriteLine("enter address");
                obj.Address = Console.ReadLine();
                //creating obj of business layer class
                CustomerBL cbl = new CustomerBL();
                //invoke its addproduct method
                bool result = cbl.UpdateCustomer(obj);
                if (result)
                {
                    Console.WriteLine("customer updated successfully");
                }
            }
            catch (CustomerException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (FormatException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (SystemException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }


        static void DeleteCustomer()
        {
            try
            {
                Console.WriteLine("enter customer id");
                string cid = Console.ReadLine();

                CustomerBL cbl = new CustomerBL();
                bool result = cbl.DeleteCustomer(cid);
                if (result)
                {
                    Console.WriteLine(" Customer deleted");
                }

            }
            catch (FormatException ex)
            {

                Console.WriteLine(ex.Message);
            }
            catch (SystemException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

    }
}
